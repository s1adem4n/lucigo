// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package db

import (
	"context"
)

const createSession = `-- name: CreateSession :one
INSERT INTO
  sessions (id, user_id, expiry)
VALUES
  (?, ?, ?) RETURNING id, user_id, expiry
`

type CreateSessionParams struct {
	ID     string `json:"id"`
	UserID string `json:"userId"`
	Expiry int64  `json:"expiry"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (*Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.ID, arg.UserID, arg.Expiry)
	var i Session
	err := row.Scan(&i.ID, &i.UserID, &i.Expiry)
	return &i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE
  id = ?
`

func (q *Queries) DeleteSession(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT
  id, user_id, expiry
FROM
  sessions
WHERE
  id = ?
`

func (q *Queries) GetSession(ctx context.Context, id string) (*Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(&i.ID, &i.UserID, &i.Expiry)
	return &i, err
}
